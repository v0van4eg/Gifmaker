### Техническое задание на разработку программы "Генератор GIF"

#### 1. **Общее описание программы**
Программа представляет собой веб-приложение для создания анимированных GIF-файлов из загруженных пользователем изображений. Приложение состоит из нескольких микросервисов, которые взаимодействуют между собой через API Gateway (Nginx). Основные функции программы включают загрузку изображений, изменение их порядка, удаление изображений и генерацию GIF-файла с настраиваемыми параметрами (длительность кадра, количество циклов, размер изображения).

#### 2. **Архитектура программы**
Программа построена на основе микросервисной архитектуры и состоит из следующих компонентов:

- **Web UI**: Веб-интерфейс, который предоставляет пользователю возможность загружать изображения, управлять их порядком и генерировать GIF-файлы.
- **Image Processing**: Микросервис, отвечающий за обработку изображений (загрузка, удаление, изменение порядка).
- **GIF Generator**: Микросервис, который генерирует GIF-файлы из загруженных изображений.
- **Nginx API Gateway**: Сервер, который выступает в роли шлюза для всех микросервисов, обеспечивая маршрутизацию запросов и балансировку нагрузки.

#### 3. **Функциональные требования**

##### 3.1. **Web UI**
- **Загрузка изображений**: Пользователь может загружать изображения через веб-интерфейс. Поддерживаются форматы: PNG, JPG, JPEG, BMP, TIFF.
- **Управление изображениями**: Пользователь может изменять порядок изображений, удалять их и просматривать загруженные файлы.
- **Генерация GIF**: Пользователь может указать параметры для создания GIF-файла:
  - Длительность кадра (в миллисекундах).
  - Количество циклов воспроизведения (0 для бесконечного цикла).
  - Размер изображения (в формате "ШxВ", например, "320x240").
- **Скачивание GIF**: После генерации пользователь может скачать созданный GIF-файл.
- **Новая сессия**: Пользователь может начать новую сессию, что очищает все загруженные изображения и сбрасывает параметры.

##### 3.2. **Image Processing**
- **Загрузка изображений**: Микросервис принимает загруженные файлы, сохраняет их на сервере и возвращает список новых имен файлов.
- **Удаление изображений**: Микросервис удаляет указанное изображение из папки загрузок.
- **Изменение порядка изображений**: Микросервис изменяет порядок изображений в соответствии с запросом пользователя.

##### 3.3. **GIF Generator**
- **Генерация GIF**: Микросервис создает GIF-файл из загруженных изображений с учетом указанных параметров (длительность кадра, количество циклов, размер).
- **Оптимизация GIF**: После создания GIF-файл оптимизируется с использованием утилиты `gifsicle` для уменьшения размера файла.

##### 3.4. **Nginx API Gateway**
- **Маршрутизация запросов**: Nginx перенаправляет запросы от веб-интерфейса к соответствующим микросервисам.
- **Обработка статических файлов**: Nginx обслуживает статические файлы (CSS, JS, изображения) и файлы загрузок.
- **Логирование**: Nginx ведет логи доступа и ошибок.

#### 4. **Технические требования**

##### 4.1. **Web UI**
- **Технологии**: Flask, HTML, CSS, JavaScript (jQuery, jQuery UI).
- **Функции**:
  - Отображение загруженных изображений.
  - Drag-and-drop для изменения порядка изображений.
  - Форма для загрузки новых изображений.
  - Форма для настройки параметров GIF.
  - Кнопка для создания новой сессии.
  - Порядок файлов хранится в виде json
- **Логирование**: Все действия пользователя логируются для отладки и анализа.

##### 4.2. **Image Processing**
- **Технологии**: Flask, Python.
- **Функции**:
  - Загрузка изображений с проверкой формата.
  - Удаление изображений по запросу.
  - Изменение порядка изображений.
- **Логирование**: Все операции с изображениями логируются.

##### 4.3. **GIF Generator**
- **Технологии**: Flask, Python, Pillow, imageio, gifsicle.
- **Функции**:
  - Генерация GIF-файла из загруженных изображений.
  - Оптимизация GIF с использованием `gifsicle`.
- **Логирование**: Процесс генерации и оптимизации GIF логируется.

##### 4.4. **Nginx API Gateway**
- **Конфигурация**: Маршрутизация запросов к микросервисам, обработка статических файлов, логирование.
- **Логирование**: Логи доступа и ошибок сохраняются в файлы.

#### 5. **Требования к инфраструктуре**
- **Docker**: Все компоненты программы упакованы в Docker-контейнеры для удобства развертывания.
- **Docker Compose**: Используется для управления несколькими контейнерами (Web UI, Image Processing, GIF Generator, Nginx).
- **Порты**:
  - Web UI: 5000
  - Image Processing: 5001
  - GIF Generator: 5002
  - Nginx: 8050

#### 6. **Требования к безопасности**
- **Сессии**: Каждый пользователь работает в своей сессии, которая идентифицируется уникальным `session_id`.
    Данные сессии хранятся на сервере, так же там хранится порядок файлов. Порядок файлов хранится и передаётся в виде json
    типа {'1':'filename1','2': 'filename2','3': 'filename3'}
    после перестановок будет примерно так {'1':'filename3','2': 'filename2','3': 'filename1'}
- **Загрузка файлов**: Проверка формата загружаемых файлов для предотвращения загрузки вредоносных данных.
- **Логирование**: Все действия пользователя и ошибки логируются для последующего анализа.

#### 7. **Требования к производительности**
- **Оптимизация GIF**: Использование `gifsicle` для оптимизации размера GIF-файлов.
- **Масштабируемость**: Микросервисная архитектура позволяет масштабировать отдельные компоненты приложения в зависимости от нагрузки.

#### 8. **Требования к интерфейсу**
- **Веб-интерфейс**: Простой и интуитивно понятный интерфейс с возможностью drag-and-drop для управления изображениями.
- **Адаптивность**: Интерфейс должен корректно отображаться на устройствах с разными разрешениями экрана.

#### 9. **Требования к тестированию**
- **Модульное тестирование**: Каждый микросервис должен быть протестирован отдельно.
- **Интеграционное тестирование**: Проверка взаимодействия между микросервисами через API Gateway.
- **Тестирование интерфейса**: Проверка корректности работы веб-интерфейса на разных устройствах и браузерах.

#### 10. **Требования к документации**
- **Техническая документация**: Документация по API каждого микросервиса, инструкции по развертыванию и настройке.
- **Руководство пользователя**: Описание функциональности веб-интерфейса и инструкции по использованию.

#### 11. **Требования к развертыванию**
- **Docker Compose**: Программа должна быть развернута с использованием Docker Compose.
- **Конфигурация**: Все настройки (порты, пути к файлам) должны быть вынесены в конфигурационные файлы.

#### 12. **Требования к поддержке**
- **Обновления**: Программа должна поддерживать возможность обновления отдельных компонентов без остановки всей системы.
- **Мониторинг**: Необходимо обеспечить мониторинг работы микросервисов и логирование ошибок.

---

### Заключение
Данное техническое задание описывает функциональные и технические требования к разработке программы "Генератор GIF".
Программа должна быть реализована с использованием микросервисной архитектуры, обеспечивать высокую производительность
и безопасность, а также иметь простой и интуитивно понятный интерфейс для пользователя.
